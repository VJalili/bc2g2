using INode = BC2G.Graph.Model.INode;

namespace BC2G.Graph.Db.Neo4jDb.BitcoinMappers;

public class S2SEdgeStrategy : BitcoinEdgeStrategy
{
    public const string labels = "Script";

    /// Note that the ordre of the items in this array should 
    /// match those in the `GetCsv` method.
    private readonly Property[] _properties = new Property[]
    {
        Props.EdgeSourceAddress,
        Props.EdgeTargetAddress,
        Props.EdgeType,
        Props.EdgeValue,
        Props.Height
    };

    public override string GetCsvHeader()
    {
        return string.Join(
            Neo4jDb.csvDelimiter,
            from x in _properties select x.CsvHeader);
    }

    public override string GetCsv(IEdge<INode, INode> edge)
    {
        return GetCsv((S2SEdge)edge);
    }

    public static string GetCsv(S2SEdge edge)
    {
        /// Note that the ordre of the items in this array should 
        /// match those in the `_properties`. 

        return string.Join(Neo4jDb.csvDelimiter, new string[]
        {
            edge.Source.Address,
            edge.Target.Address,
            edge.Type.ToString(),
            edge.Value.ToString(),
            edge.BlockHeight.ToString()
        });
    }

    public override string GetQuery(string csvFilename)
    {
        // The following is an example of a query generated by this method. 
        // 
        // LOAD CSV WITH HEADERS FROM 'file:///filename.csv' AS line
        // FIELDTERMINATOR '	'
        //
        // MATCH (source:Script {Address:line.SourceAddress})
        // MATCH (target:Script {Address:line.TargetAddress})
        // MATCH (block:Block {Height:toInteger(line.Height)})
        //
        // MERGE (source)-[:Redeems {Height:toInteger(line.Height)}]->(block)
        // MERGE (block)-[:Creates {Height:toInteger(line.Height)}]->(target)
        //
        // WITH line, source, target, block
        //
        // CALL apoc.merge.relationship(
        //   source,
        //   line.EdgeType,
        //   {
        //     Value:toFloat(line.Value),
        //     Height:toInteger(line.Height)
        //   },
        //   {
        //     Count : 0
        //   },
        //   target,
        //   {})
        // YIELD rel
        // SET rel.Count = rel.Count + 1
        //
        // RETURN distinct 'DONE'
        //

        string l = Property.lineVarName, s = "source", t = "target", b = "block";

        var builder = new StringBuilder(
            $"LOAD CSV WITH HEADERS FROM '{csvFilename}' AS {l} " +
            $"FIELDTERMINATOR '{Neo4jDb.csvDelimiter}' ");

        builder.Append(
            $"MATCH ({s}:{ScriptNodeStrategy.labels} {{{Props.EdgeSourceAddress.GetSetter()}}}) " +
            $"MATCH ({t}:{ScriptNodeStrategy.labels} {{{Props.EdgeTargetAddress.GetSetter()}}}) " +
            $"MATCH ({b}:{BlockGraphStrategy.labels} {{{Props.Height.GetSetter()}}}) ");

        builder.Append(
            GetRedeemsEdgeQuery(b, s) + " " +
            GetCreatesEdgeQuery(b, t) + " ");

        builder.Append($"WITH {l}, {s}, {t}, {b} ");

        builder.Append(
            GetEdgeQuery(new List<Property>() { Props.EdgeValue, Props.Height }, s, t));

        builder.Append($" RETURN distinct 'DONE'");

        return builder.ToString();
    }
}
