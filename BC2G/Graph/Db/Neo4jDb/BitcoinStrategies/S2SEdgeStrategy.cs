namespace BC2G.Graph.Db.Neo4jDb.BitcoinStrategies;

public class S2SEdgeStrategy : BitcoinEdgeStrategy
{
    public const string labels = "Script";

    /// Note that the ordre of the items in this array should 
    /// match those in the `GetCsv` method.
    private readonly Property[] _properties =
    [
        Props.EdgeSourceAddress,
        Props.EdgeTargetAddress,
        Props.EdgeType,
        Props.EdgeValue,
        Props.Height
    ];

    public override string GetCsvHeader()
    {
        return string.Join(
            Neo4jDb.csvDelimiter,
            from x in _properties select x.CsvHeader);
    }

    public override string GetCsv(IGraphComponent edge)
    {
        return GetCsv((S2SEdge)edge);
    }

    public static string GetCsv(S2SEdge edge)
    {
        /// Note that the ordre of the items in this array should 
        /// match those in the `_properties`. 

        return string.Join(Neo4jDb.csvDelimiter,
        [
            edge.Source.Address,
            edge.Target.Address,
            edge.Type.ToString(),
            edge.Value.ToString(),
            edge.BlockHeight.ToString()
        ]);
    }

    public override string GetQuery(string csvFilename)
    {
        // The following is an example of a query generated by this method.
        // Indentation is added for better readability and is not included
        // in the generated query.
        //
        // 
        // LOAD CSV WITH HEADERS FROM 'file:///filename.csv' AS line
        // FIELDTERMINATOR '	'
        //
        // MATCH
        //     (source:Script {Address:line.SourceAddress}),
        //     (target:Script {Address:line.TargetAddress}),
        //     (block:Block {Height:toInteger(line.Height)})
        //
        // CREATE (source)-[:Redeems {Height:toInteger(line.Height), Value:toFloat(line.Value)}]->(block)
        // CREATE (block)-[:Creates  {Height:toInteger(line.Height), Value:toFloat(line.Value)}]->(target)
        //
        // WITH line, block, source, target
        //
        // CALL apoc.create.relationship(
        //     source,
        //     line.EdgeType,
        //     {
        //         Height:toInteger(line.Height),
        //         Value:toFloat(line.Value)
        //     },
        //     target)
        // YIELD rel
        // RETURN distinct 'DONE'
        //

        string l = Property.lineVarName, b = "block", s = "source", t = "target";

        var builder = new StringBuilder(
            $"LOAD CSV WITH HEADERS FROM '{csvFilename}' AS {l} " +
            $"FIELDTERMINATOR '{Neo4jDb.csvDelimiter}' ");

        builder.Append(
            $"MATCH " +
            $"({s}:{ScriptNodeStrategy.Labels} {{{Props.EdgeSourceAddress.GetSetter()}}}), " +
            $"({t}:{ScriptNodeStrategy.Labels} {{{Props.EdgeTargetAddress.GetSetter()}}}), " +
            $"({b}:{BlockNodeStrategy.Labels} {{{Props.Height.GetSetter()}}}) ");

        builder.Append(GetRedeemsEdgeQuery(b, s) + " ");
        builder.Append(GetCreatesEdgeQuery(b, t) + " ");

        builder.Append($"WITH {l}, {b}, {s}, {t} ");

        builder.Append(GetApocCreateEdgeQuery(GetEdgePropertiesBase(), s, t));

        builder.Append(" RETURN distinct 'DONE'");

        return builder.ToString();
    }
}
