namespace BC2G.Graph.Db.Neo4jDb.BitcoinMappers;

public class T2TEdgeStrategy : BitcoinEdgeStrategy
{
    public const string labels = "Tx";

    /// Note that the ordre of the items in this array should 
    /// match those in the `GetCSV` method.
    private readonly Property[] _properties = new Property[]
    {
        Props.T2TEdgeSourceTxid,
        Props.T2TEdgeTargetTxid,
        Props.EdgeType,
        Props.EdgeValue,
        Props.Height
    };

    public override string GetCsvHeader()
    {
        return string.Join(
            Neo4jDb.csvDelimiter,
            from x in _properties select x.CsvHeader);
    }

    public override string GetCsv(IGraphComponent edge)
    {
        return GetCsv((T2TEdge)edge);
    }

    public static string GetCsv(T2TEdge edge)
    {
        return string.Join(Neo4jDb.csvDelimiter, new string[]
        {
            edge.Source.Txid,
            edge.Target.Txid,
            edge.Type.ToString(),
            edge.Value.ToString(),
            edge.BlockHeight.ToString()
        });
    }

    public override string GetQuery(string csvFilename)
    {
        // The following is an example of the query generated by this method.
        //
        // LOAD CSV WITH HEADERS FROM 'file:///filename.csv' AS line
        // FIELDTERMINATOR '	'
        //
        // MATCH (source:Tx {Txid:line.SourceId})
        // MATCH (target:Tx {Txid:line.TargetId})
        // MATCH (block:Block {Height:toInteger(line.Height)})
        //
        // MERGE (source)-[:Redeems {Height:toInteger(line.Height)}]->(block)
        // MERGE (block)-[:Creates {Height:toInteger(line.Height)}]->(target)
        //
        // WITH line, source, target, block
        //
        // CALL apoc.merge.relationship(
        //   source,
        //   line.EdgeType,
        //   {
        //     EdgeType:line.EdgeType,
        //     Value:toFloat(line.Value),
        //     Height:toInteger(line.Height)
        //   },
        //   {
        //     Count : 0
        //   },
        //   target,
        //   {})
        // YIELD rel SET rel.Count = rel.Count + 1
        // RETURN distinct 'DONE'
        //

        string l = Property.lineVarName, s = "source", t = "target", b = "block";

        var builder = new StringBuilder(
            $"LOAD CSV WITH HEADERS FROM '{csvFilename}' AS {l} " +
            $"FIELDTERMINATOR '{Neo4jDb.csvDelimiter}' ");

        builder.Append(
            $"MATCH ({s}:{TxNodeStrategy.labels} {{{Props.T2TEdgeSourceTxid.GetSetter()}}}) " +
            $"MATCH ({t}:{TxNodeStrategy.labels} {{{Props.T2TEdgeTargetTxid.GetSetter()}}}) " +
            $"MATCH ({b}:{BlockGraphStrategy.labels} {{{Props.Height.GetSetter()}}}) ");

        builder.Append(
            GetRedeemsEdgeQuery(b, s) + " " +
            GetCreatesEdgeQuery(b, t) + " ");

        builder.Append($"WITH {l}, {s}, {t}, {b} ");

        builder.Append(
            GetEdgeQuery(new List<Property>() { Props.EdgeType, Props.EdgeValue, Props.Height }, s, t));

        builder.Append($" RETURN distinct 'DONE'");

        return builder.ToString();
    }
}
